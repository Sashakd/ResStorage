#ifndef LIST_H
#define LIST_H

#include <stdio.h>
#include <stdlib.h>

struct list_el
{
    int data;
    struct list_el* next;
};

////////////////////////////////////////////////////////////////////////
/// \brief read_list_from_file -- читает целые числа из файла и
/// записывает их в список.
/// \param f -- файл с целыми числами
/// \return -- возвращает указатель на голову списка, если удалось
/// прочитать хотя бы одно слово. Иначе -- NULL
///
struct list_el* read_list_from_file(FILE* f);

////////////////////////////////////////////////////////////////////////
/// \brief print_list -- печатает элементы списка с данными
/// целочисленного типа.
/// \param f -- файл в который печатаются элементы, можно указать
/// в качестве файла stdout
/// \param head -- указатель на голову списка, если head == NULL,
/// то функция ничего не печатает
///
void print_list(FILE* f, struct list_el* head);

////////////////////////////////////////////////////////////////////////
/// \brief free_list -- освобождает список
/// \param head -- указатель на голову списка, можно указывать NULL
///
void free_list(struct list_el* head);

////////////////////////////////////////////////////////////////////////
/// \brief lists_uny -- объединяет два упорядоченных по невозрастанию
/// списка в один, сохраняя порядок.
/// \param a -- указатель на первый список с целочисленными элементами
/// \param b -- указатель на второй список с целочисленными элементами
/// \return -- возвращает объединённый список. (Внимание! Требуется
/// освобождение памяти только возвращаемого списка)
///
struct list_el* lists_uny(struct list_el* a, struct list_el* b);

#endif // LIST_H
